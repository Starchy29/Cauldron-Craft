#pragma kernel Update

struct TileInfo {
    int floorType; // 0: ground, 1: wall, 2: pit
    int highlightType;
    int terrainController;
    int capturer; // 0: not a capture point, -1: no team, 1: left team, 2: right team, 3: both teams
};

// NONE: 0
#define AREA_VISUAL 1
#define HIGHLIGHT 2
#define OPTION 3
#define HOVERED 4
#define SELECTED 5

float4 team1Color;
float4 team2Color;

int pixPerTile;
int2 tileDims;
float t;
#define PI 3.14159

int2 cursorTile;
int2 hoveredZoneCenter;
RWStructuredBuffer<TileInfo> _TileData;
RWTexture2D<float4> _Texture;

TileInfo getTile(int x, int y) {
    if(x < 0 || y < 0 || x >= tileDims.x || y >= tileDims.y) {
        TileInfo junk;
        junk.terrainController = -1;
        junk.highlightType = -1;
        return junk;
    }

    return _TileData[x + tileDims.x * y];
}

float getDistFromEdge(float2 tileUV, bool checkLeft, bool checkRight, bool checkDown, bool checkUp) {
    float distance = 1;
    if(checkLeft) {
        distance = min(distance, tileUV.x);
    }
    if(checkRight) {
        distance = min(distance, 1 - tileUV.x);
    }
    if(checkDown) {
        distance = min(distance, tileUV.y);
    }
    if(checkUp) {
        distance = min(distance, 1 - tileUV.y);
    }
    return distance;
}

[numthreads(8,8,1)]
void Update(uint3 id : SV_DispatchThreadID) {
    int2 tile = id.xy / pixPerTile;
    float2 tileUV = float2(id.xy - tile * pixPerTile) / pixPerTile;
    TileInfo tileData = getTile(tile.x, tile.y);
    
    // fill in highlight
    float4 color = float4(0, 0, 0, 0);
    switch (tileData.highlightType) {
    case HIGHLIGHT:
        color = float4(0.9, 0.9, 0.7, 0.5);
        break;
    case OPTION:
        color = float4(0, 0.8, 0.8, 0.5 + 0.1 * sin(t * 4 * PI));
        break;
    case HOVERED:
        color = float4(0, 0.2, 0.8, 0.5 + 0.2 * sin(t * 8 * PI));
        break;
    case SELECTED:
        color = float4(0.5, 0.9, 0.5, 0.5 + 0.2 * sin(t * 2 * PI));
        break;
    case AREA_VISUAL:
        color = float4(0.9, 0.9, 0.7, 0.1);
        break;
    }

    TileInfo leftTile = getTile(tile.x - 1, tile.y);
    TileInfo rightTile = getTile(tile.x + 1, tile.y);
    TileInfo aboveTile = getTile(tile.x, tile.y + 1);
    TileInfo belowTile = getTile(tile.x, tile.y - 1);

    // apply outline
    int2 zoneCenterDiff = hoveredZoneCenter - tile;
    int zoneSize = 2;
    if(abs(zoneCenterDiff.x) <= zoneSize && abs(zoneCenterDiff.y) <= zoneSize
        && (abs(zoneCenterDiff.x) == zoneSize || abs(zoneCenterDiff.y) == zoneSize)
    ) {
        // outline hovered capture zone
        float lineThickness = 0.6;
        float distFromEdge = getDistFromEdge(tileUV,
            zoneCenterDiff.x == zoneSize,
            zoneCenterDiff.x == -zoneSize,
            zoneCenterDiff.y == zoneSize,
            zoneCenterDiff.y == -zoneSize
        );

        if(distFromEdge <= lineThickness) {
            float4 outlineColor = float4(0.9, 0.8, 0.1, 1);
            float root = (1 - distFromEdge / lineThickness);
            outlineColor.a = 0.7 * root * root;

            if(color.a > 0) {
                outlineColor = outlineColor.a * float4(outlineColor.x, outlineColor.y, outlineColor.z, 0);
                color += outlineColor;
            } else {
                color = outlineColor;
            }
        }
    }
    else if(tileData.terrainController != 0) {
        // terrain controller
        float distFromEdge = getDistFromEdge(tileUV, 
            leftTile.terrainController != tileData.terrainController,
            rightTile.terrainController != tileData.terrainController,
            belowTile.terrainController != tileData.terrainController,
            aboveTile.terrainController != tileData.terrainController
        );
        if(distFromEdge <= 0.05) {
            color = tileData.terrainController == 1 ? team1Color : team2Color;
        }
    }
    else if(tileData.capturer != 0) {
        // capture point controller
        float lineThickness = 0.25;
        float distFromEdge = getDistFromEdge(tileUV,
            leftTile.capturer != tileData.capturer,
            rightTile.capturer != tileData.capturer,
            belowTile.capturer != tileData.capturer,
            aboveTile.capturer != tileData.capturer
        );
        float4 outlineColor = float4(0, 0, 0, 0);
        if(distFromEdge <= lineThickness) {
            switch (tileData.capturer) {
            case -1:
                outlineColor = float4(1, 1, 1, 1);
                break;
            case 1:
                outlineColor = team1Color;
                break;
            case 2:
                outlineColor = team2Color;
                break;
            case 3:
                outlineColor = (team1Color + team2Color) / 2;
                break;
            }

            float root = (1 - distFromEdge / lineThickness);
            outlineColor.a = 0.7 * root * root;

            if(color.a > 0) {
                outlineColor = outlineColor.a * float4(outlineColor.x, outlineColor.y, outlineColor.z, 0);
                color += outlineColor;
            } else {
                color = outlineColor;
            }
        }
    }

    if(tileData.floorType == 0) {
        // add grid lines
        bool isCursor = tile.x == cursorTile.x && tile.y == cursorTile.y;
        float lineThickness = isCursor ? 0.05 : 0.015;
        float outlineValue = isCursor ? 0.7 : 0.1;
        if(tileUV.x < lineThickness || tileUV.x > 1 - lineThickness || tileUV.y < lineThickness || tileUV.y > 1 - lineThickness) {
            float edgeSpot = tileUV.x < lineThickness || tileUV.x > 1 - lineThickness ? tileUV.y : tileUV.x; // 0 - 1 along the edge
            int edgeSegments = 7;
            int edgeIndex = edgeSpot * edgeSegments;
            if(edgeIndex % 2 == 0) {
                color = color.a > 0 ? color + float4(outlineValue, outlineValue, outlineValue, 0) : float4(1, 1, 1, outlineValue);
            }
        }
    }

    _Texture[id.xy] = color;
}
